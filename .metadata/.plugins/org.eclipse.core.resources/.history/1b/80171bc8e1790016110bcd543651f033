package threads;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class UsingSynchronizers {

	public static void main(String args[]) throws InterruptedException {
		ExecutorService executor = new ThreadPoolExecutor(1, 2, 100, TimeUnit.MILLISECONDS,
				new ArrayBlockingQueue<Runnable>(10));
		System.out.println(UsingSynchronizers.time(executor, 2, new Runnable() {

			@Override
			public void run() {
				System.out.println("start Working");
			}
		}));
	}

	public static long time(Executor exe, int concurrency, final Runnable action) throws InterruptedException {
		final CountDownLatch ready = new CountDownLatch(concurrency);
		final CountDownLatch start = new CountDownLatch(1);
		final CountDownLatch done = new CountDownLatch(concurrency);

		for (int i = 0; i < concurrency; i++) {
			exe.execute(new Runnable() {

				@Override
				public void run() {
					System.out.println("5");
					ready.countDown();
					System.out.println("6");
					try {
						start.await();
						System.out.println("7");
						action.run();
						System.out.println("8");
					} catch (InterruptedException e) {
						Thread.currentThread().interrupt();
					} finally {
						done.countDown();
						System.out.println("9");
					}
				}
			});
		}

		System.out.println("1");
		ready.await();
		System.out.println("2");
		long startTime = System.nanoTime();
		start.countDown();
		System.out.println("3");
		done.await();
		System.out.println("4");
		return System.nanoTime() - startTime;
	}
}
