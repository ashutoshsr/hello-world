package com.ashu.core.observer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ObservableSet<E> extends ForwardingSet<E> {

	public ObservableSet(Set<E> s) {
		super(s);
	}

	private final List<SetObserver<E>> observers = new ArrayList<>();

	public void addObserver(SetObserver<E> observer) {
		synchronized (observer) {
			observers.add(observer);
		}
	}

	public boolean removeObserver(SetObserver<E> observer) {
		synchronized (observer) {
			return observers.remove(observer);
		}
	}

	private void notifyElementAdded(E element) {
		List<SetObserver<E>> snapshot = null;
		synchronized (observers) {
			snapshot = new ArrayList<>(observers);
			for (SetObserver<E> setObserver : observers) {
				setObserver.added(this, element);
			}
		}
	}

	@Override
	public boolean add(E e) {
		boolean added = super.add(e);
		if (added) {
			notifyElementAdded(e);
		}
		return added;
	}

	@Override
	public boolean addAll(Collection<? extends E> c) {
		boolean result = false;
		for (E e : c) {
			result |= add(e);
		}
		// TODO Auto-generated method stub
		return result;
	}

	public static void main(String args[]) throws Exception {
		ObservableSet<Integer> set = new ObservableSet<>(new HashSet<Integer>());
		set.addObserver(new SetObserver<Integer>() {

			@Override
			public void added(ObservableSet<Integer> set, Integer element) {
				System.out.println(element);
				if (element == 23) {
					final SetObserver<Integer> observer = this;
					ExecutorService executor = Executors.newSingleThreadExecutor();

					try {
						executor.submit(new Runnable() {
							@Override
							public void run() {
//								try {
									set.removeObserver(observer);
								/*} catch (Exception e) {
									e.printStackTrace();
								}*/
							}
						}).get();
					} catch (InterruptedException e) {
						throw new AssertionError(e.getCause());
					} catch (ExecutionException e) {
						throw new AssertionError(e.getCause());
					} finally {
						// executor.shutdown();
					}
				}
			}
		});

		for (int i = 0; i < 100; i++) {
			set.add(i);
		}
	}

}
