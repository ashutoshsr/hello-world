package threads;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class UsingSynchronizers {

	public static void main(String args[]) throws InterruptedException {
		ExecutorService executor = new ThreadPoolExecutor(10, 20, 5000, TimeUnit.MILLISECONDS,
				new ArrayBlockingQueue<Runnable>(10));
		System.out.println(UsingSynchronizers.time(Executors.newSingleThreadExecutor(), 1, new Runnable() {
			
			@Override
			public void run() {
				System.out.println("start Working");
			}
		}));
	}
	
	public static long time(Executor exe, int concurrency, final Runnable action) throws InterruptedException {
		final CountDownLatch ready = new CountDownLatch(concurrency);
		final CountDownLatch start = new CountDownLatch(concurrency);
		final CountDownLatch done = new CountDownLatch(concurrency);
		
		for (int i = 0; i < concurrency; i++) {
			exe.execute(new Runnable() {
				
				@Override
				public void run() {
					try {
						ready.countDown();
						start.await();
						action.run();
					} catch (InterruptedException e) {
						Thread.currentThread().interrupt();
					} finally {
						done.countDown();
					}
				}
			});
		}
		
		ready.await();
		long startTime = System.currentTimeMillis();
		start.countDown();
		done.await();
		return System.currentTimeMillis() - startTime;
	}
}
